#!/bin/bash
# List of functions used exclusively in dab, but imports abs functions too
# https://keyaedisa.github.io, https://github.com/keyaedisa

source /etc/dab/misc/.functions

# Show an INFO message
# $1: message string
_msg_info() {
    local _msg="${1}"
    [[ "${quiet}" == "y" ]] || printf '[%s] INFO: %s\n' "${app_name}" "${_msg}"
}

# Show a WARNING message
# $1: message string
_msg_warning() {
    local _msg="${1}"
    printf '[%s] WARNING: %s\n' "${app_name}" "${_msg}" >&2
}

# Show an ERROR message then exit with status
# $1: message string
# $2: exit code number (with 0 does not exit)
_msg_error() {
    local _msg="${1}"
    local _error=${2}
    printf '[%s] ERROR: %s\n' "${app_name}" "${_msg}" >&2
    if (( _error > 0 )); then
        exit "${_error}"
    fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usageDev() {
    IFS='' read -r -d '' usagetext <<ENDUSAGETEXT || true
usage: ${app_name} [options]
  options:
     -c               Build an Arch ISO using a custom profile.
                      Default: '${iso_application}'
     -C <file>        pacman configuration file.
                      Default: '${pacman_conf}'
     -D <install_dir> Set an install_dir. All files will by located here.
                      Default: '${install_dir}'
                      NOTE: Max 8 characters, use only [a-z0-9]
     -L <label>       Set the ISO volume label
                      Default: '${iso_label}'
     -P <publisher>   Set the ISO publisher
                      Default: '${iso_publisher}'
     -c [cert ..]     Provide certificates for codesigning of netboot artifacts as
                      well as the rootfs artifact.
                      Multiple files are provided as quoted, space delimited list.
                      The first file is considered as the signing certificate,
                      the second as the key and the third as the optional certificate authority.
     -g <gpg_key>     Set the PGP key ID to be used for signing the rootfs image.
                      Passed to gpg as the value for --default-key
     -G <mbox>        Set the PGP signer (must include an email address)
                      Passed to gpg as the value for --sender
     -h               This message
     -m [mode ..]     Build mode(s) to use (valid modes are: 'bootstrap', 'iso' and 'netboot').
                      Multiple build modes are provided as quoted, space delimited list.
     -o <out_dir>     Set the output directory
                      Default: '${out_dir}'
     -p [package ..]  Package(s) to install.
                      Multiple packages are provided as quoted, space delimited list.
     -v               Enable verbose output
     -w <work_dir>    Set the working directory
                      Default: '${work_dir}'

  profile_dir:        Directory of the archiso profile to build
ENDUSAGETEXT
    printf '%s' "${usagetext}"
    exit "${1}"
}

_listOptsDev() {
	echo "${txBold}${fgBlue}Usage${txReset}:"
	echo "    ${app_name} [OPTIONS]"
	printf "${txBold}${fgBlue}Options${txReset}:\n"
	printf "    ${app_name} can be called with no options and an interactive menu will start\n"
	printf "    -buildAndPush   Build a new Pkg Tar and upload to Pkg Repo.\n"
	printf "    -c,             Build an Arch ISO using a custom profile.\n"
	printf "    -gitpush        Add all changes, make a commit, and push to repo.\n"
	printf "    -h,             Display this help message and exit.\n"
	printf "    --help,         Display more detailed help message and exit.\n"
	printf "    -V,             Display current abs version.\n"
	printf "    -mergeDevToProd Build a new Pkg Tar and upload to Pkg Repo.\n"
	printf "    -v,             Build an official Vanilla Arch Monthly ISO.\n"
	printf "    -vb,            Build an official Vanilla Arch Monthly ISO but with only whats needed to boot.\n"
	printf "    -x,             Build a XeroLinux Arch ISO using latest source.\n"
	printf "    -xg,            Build a XeroLinux Gnome Arch ISO using latest source.\n"
}

_dabTUI() {
if [[ -n $1 ]]; then
	case $1 in
		-c | --custom )	custom ;;
		-h | --help ) _help $1 ;;
		-V | --version ) _version ;;
		-v | --releng ) vanilla ;;
		-vb | --baseline ) vanillaBaseline ;;
		-x | --xero | xero | Xero ) xero ;;
		-xg | --xerog | xerog | XeroG ) xerog ;;
		-gitpush ) _pushToGit ;;
		-mergeDevToProd ) _mergeDevToProd ;;
		-buildAndPush | -buildAndPushToRepo ) _buildAndPushToRepo ;;
		* )
			echo "Not a valid dab option."
			echo
			_help
			;;
	esac
elif [[ -z $1 ]]; then
	_version
	echo
	fin='0'
	while [ $fin != 1 ]; do
	_listOptsDev
	read -p "What option would you like to select?" opt
	case $opt in
		-c | --custom )
			custom
			fin='1' ;;
		-h | --help )
			_help $opt ;;
		-V | --version )
			_version
			fin='1' ;;
		-v | --releng )
			vanilla
			fin='1' ;;
		-vb | --baseline )
			vanillaBaseline
			fin='1' ;;
		-x | --xero | xero | Xero )
			xero
			fin='1' ;;
		-xg | --xerog | xerog | XeroG )
			xerog
			fin='1' ;;
		-gitpush )
			_pushToGit
			fin='1' ;;
		-mergeDevToProd )
			_mergeDevToProd
			fin='1' ;;
		-buildAndPush | -buildAndPushToRepo )
			_buildAndPushToRepo
			fin='1' ;;
		* )
			echo "Not a valid dab option. Try again"
			echo
			;;
	esac
	done
fi
}

# Shows configuration options.
_show_config() {
    local build_date
    printf -v build_date '%(%FT%R%z)T' "${SOURCE_DATE_EPOCH}"
    _msg_info "${app_name} configuration settings"
    _msg_info "             Architecture:   ${arch}"
    _msg_info "        Working directory:   ${work_dir}"
    _msg_info "   Installation directory:   ${install_dir}"
    _msg_info "               Build date:   ${build_date}"
    _msg_info "         Output directory:   ${out_dir}"
    _msg_info "       Current build mode:   ${buildmode}"
    _msg_info "              Build modes:   ${buildmodes[*]}"
    _msg_info "                  GPG key:   ${gpg_key:-None}"
    _msg_info "               GPG signer:   ${gpg_sender:-None}"
    _msg_info "Code signing certificates:   ${cert_list[*]:-None}"
    _msg_info "                  Profile:   ${profile}"
    _msg_info "Pacman configuration file:   ${pacman_conf}"
    _msg_info "          Image file name:   ${image_name:-None}"
    _msg_info "         ISO volume label:   ${iso_label}"
    _msg_info "            ISO publisher:   ${iso_publisher}"
    _msg_info "          ISO application:   ${iso_application}"
    _msg_info "               Boot modes:   ${bootmodes[*]:-None}"
    _msg_info "            Packages File:   ${buildmode_packages}"
    _msg_info "                 Packages:   ${buildmode_pkg_list[*]}"
}

_pushToGit() {
	echo "Oki, adding all changes, creating a new commit and pushing to this repo's git!"
	git add -A
	git commit -a
	git push
}
