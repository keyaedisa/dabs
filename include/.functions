#!/bin/bash
# List of functions used by abs duh
# https://keyaedisa.github.io, https://github.com/keyaedisa

export delAfter='0'

trap_ctrlc() {
	echo
    echo
    echo "Ctrl-C detected. Ending current ${app_name} session."
    exit
}

trap "trap_ctrlc" 2

_interactive() {
echo
echo "Welcome to the ${app_name} TUI. See below for how to use ${app_name}."
echo
fin='0'
while [ $fin != 1 ]; do
listOptions ${app_name}
echo
read -p "What option would you like to select? : " opt
case $opt in
		-c | --custom )	custom \ fin='1' ;;
		-h | --help ) _help $opt ;;
		-V | --version ) _version \ fin='1' ;;
		-v | --releng ) vanilla \ fin='1' ;;
		-vb | --baseline ) vanillaBaseline \ fin='1' ;;
		-x | --xero | xero | Xero ) xero \ fin='1' ;;
		-xg | --xerog | xerog | XeroG ) xerog \ fin='1' ;;
		-xf | --xeroce | --xerof | xerof | XeroF ) xeroce \ fin='1' ;;
		* ) if [[ ${app_name} = "dabs" ]]; then
				_interactiveD $opt
			else
				echo
				echo "${opt} is not a valid ${app_name} option. Try again."
				echo
			fi
			;;
esac
done
}

_absTUI() {
if [[ -n $1 ]]; then
	case $1 in
		-c | --custom )	custom ;;
		-h | --help ) _help $1 ;;
		-V | --version ) _version ;;
		-v | --releng ) vanilla ;;
		-vb | --baseline ) vanillaBaseline ;;
		-x | --xero | xero | Xero ) xero ;;
		-xg | --xerog | xerog | XeroG ) xerog ;;
		-xf | --xeroce | --xerof | xerof | XeroF ) xeroce \ fin='1' ;;
		* )
			if [[ ${app_name} = "dabs" ]]; then
				_$(app_name}TUI $1
			else
				echo "${1} is not a valid ${app_name} option. Try again."
				_interactive
			fi
			;;
	esac
elif [[ -z $1 ]]; then
	_interactive
fi
}


_version() {
buildVersion=3.5-21

	echo "${txBold}${fgBlue}Version${txReset}:"
	echo "    ${txBold}${fgMagenta}${app_name}${txReset} v${fgCyan}${buildVersion}${txReset}!"

}

checkSudo() {
    if [[ ${UID} -eq 0 ]]; then
        echo "Must ${txBold}${fgRed}NOT${txReset} run abs as root!"
        echo "Exiting now!"
        exit
    fi
}

checkInternetConnection() {
	ping -c 1 -q xerolinux.xyz >&/dev/null; if [[ $? != 0 ]]; then
	echo "${fgRed}Not connected to the internet${txReset}! Fix that and try again."
	exit
	fi
}

deleteBuildDir() {
	buildDir=$1
	skip=0
	while [ $skip -eq 0 ]; do
	read -p "Would you like to delete the build dir after the install? (y/n): " ans
	case $ans in
		y | Y | yes | Yes )
			delAfter='1'
			skip=1
			;;
		n | N | no | No )
			delAfter='0'
			skip=1
			;;
		*  )
			echo "yes or no plz"
			;;
	esac
	done
	while [ $skip -eq 1 ]; do
	read -p "Would you like to delete the source dir after the install? (y/n): " ans
	case $ans in
		y | Y | yes | Yes )
			delAfterS='1'
			skip=0
			;;
		n | N | no | No )
			delAfterS='0'
			skip=0
			;;
		*  )
			echo "yes or no plz"
			;;
	esac
	done
}

buildDirDeleter() {
	if [[ $delAfter = 1 && $delAfterS = 1 ]]; then
		echo "Deleting Source and Build directories. This could take some time"
	elif [[ $delAfter = 1 ]]; then
		echo "Deleting Build directory. This could take some time"
	elif [[ $delAfterS = 1 ]]; then
		echo "Deleting Source directory. This could take some time"
	fi
	if [[ $delAfter = 1 ]]; then
		sudo rm -rf $buildDir
	fi
	if [[ $delAfterS = 1 ]]; then
		dir=$(pwd)
		cd ../ && rm -rf $dir
	fi
}

isArchisoUpToDate() {
	sudo pacman -Sy archiso --needed --noconfirm > /dev/null 2>stfu.txt
	if [[ -n $(sed -n 's/is up to date -- skipping//p' stfu.txt) ]]; then
		echo "Latest archiso check ${fgGreen}succesful${txReset}!"
		sudo rm stfu.txt
	else
		sudo rm stfu.txt
		echo "Latest archiso check ${fgRed}failed${txReset}!"
		read -p "Install/update archiso now? You will ${fgRed}not${txReset} be able to continue without it!" yn
		fin='0'
		while [[ $fin != 1 ]]; do
		case $yn in
			y | yes | Yes | Y )
				echo "Oki! Archiso will now be installed/updated."
				sudo pacman -S archiso --noconfirm
				fin='1'
				;;
			n | no | No | N )
				echo "Sorry to see that. Unfortunately we can ${fgRed}no longer${txReset} continue. Good day!"
				exit
				;;
			* )
				echo "abs does not understand what you said. Try again. (${fgGreen}y${txReset}/${fgRed}n${txReset})"
				;;
		esac
		done
	fi
}

cloneGit() {
	echo "Would you like to clone the latest ${1} git to your home directory?"
	read -p "${fgRed}Warning${txReset}! This will replace this repo in your home directory if it already exists! (${fgGreen}Y${txReset}/${fgRed}N${txReset}): " YN
	finished="0"
	sourceGit=$1
	while [[ $finished != 1 ]]; do
	case $YN in
		y | Y | yes | Yes | YES )

			echo "Oki, cloning repo now."
			if [[ $sourceGit == "Xero" ]]; then
				if [[ -d ~/xero_iso ]]; then
					rm -rf ~/xero_iso
					git clone https://github.com/xerolinux/xero_iso.git ~/xero_iso
				else
					git clone https://github.com/xerolinux/xero_iso.git ~/xero_iso
				fi
				cd ~/xero_iso
			elif [[ $sourceGit == "XeroG" ]]; then
				if [[ -d ~/xero_g_iso ]]; then
					rm -rf ~/xero_g_iso
					git clone https://github.com/xerolinux/xero_g_iso.git ~/xero_g_iso
				else
					git clone https://github.com/xerolinux/xero_g_iso.git ~/xero_g_iso
				fi
				cd ~/xero_g_iso
			elif [[ $sourceGit == "XeroCE" ]]; then
				if [[ -d ~/xero_xfce_iso ]]; then
					rm -rf ~/xero_xfce_iso
					git clone https://github.com/xerolinux/xero_xfce_iso.git ~/xero_xfce_iso
				else
					git clone https://github.com/xerolinux/xero_xfce_iso.git ~/xero_xfce_iso
				fi
				cd ~/xero_xfce_iso
			else
				echo "This never happens. Congrats"
			fi
			finished="1"
			echo "Done."
			;;
		n | N | no | No | NO )
			echo "Oki. abs will not clone. Please run abs in the directory containing the ${sourceGit} profile"
			finished="1"
			exit
			;;
		* )
			echo "abs does not understand your response. Please try again. ${fgGreen}Y${txReset} or ${fgRed}N${txReset}."
			read -p "Would you like to clone the latest ${1} git to your home directory?: " YN
			;;
	esac
	done
}

listOptions() {
	echo "${txBold}${fgBlue}Usage${txReset}:"
	echo "    ${app_name} [OPTIONS]"
	printf "${txBold}${fgBlue}Options${txReset}:\n"
	printf "    ${app_name} can be called with no options and an interactive menu will start\n"
	printf "    -c,     \tBuild an Arch ISO using a custom profile.\n"
	printf "    -h,     \tDisplay help message and exit.\n"
	printf "    --help, \tDisplay more detailed help message and exit.\n"
	printf "    -V,     \tDisplay current abs version.\n"
	printf "    -v,     \tBuild an official Vanilla Arch Monthly ISO.\n"
	printf "    -vb,    \tBuild an official Vanilla Arch Monthly ISO but with only whats needed to boot.\n"
	printf "    -x,     \tBuild a XeroLinux Arch ISO using latest source.\n"
	printf "    -xg,    \tBuild a XeroLinux Gnome Arch ISO using latest source.\n"
	printf "    -xf,    \tBuild a XeroLinux XFCE Arch ISO using latest source.\n"
	if [[ ${app_name} = "dabs" ]]; then
		printf "	-b		\tBuild and push to repo.\n"
		printf "	-m		\tMerge Dev repo to Production.\n"
		printf "	-g		\tGit Push.\n"
	fi
}

searchForSourceGit() {
	sourceGit=$1
	if [[ ! -d $sourceGit ]]; then
		echo "Couldn't find ${fgRed}${sourceGit}${txReset} git in the current directory!"
		cloneGit $sourceGit
	else
		echo "Found ${fgCyan}${sourceGit}${txReset} git!"
	fi

}

valenRepoAdder() {

 read -p "Would you like to add Valen Repo to your archiso's pacman.conf so you can ${fgCyan}easily${txReset} download abs on your new system? : " yn
 echo
 profile="$1"
 fin='0'
 while [[ $fin = '0' ]]; do
 case $yn in
 	y | Y | yes | Yes )
		pmanConf=$(cat $profile/airootfs/etc/pacman.conf)
		if [[ "$pmanConf" =~ "valen_repo" ]]; then
			echo "Repo found in $profile/airootfs/etc/pacman.conf"
		else
			echo "Repo not found in $profile/airootfs/etc/pacman.conf! Will now add!"
			curl -fsSL https://raw.githubusercontent.com/keyaedisa/valen_repo/trunk/README.md | sed -n '19,20p' >> $profile/airootfs/etc/pacman.conf
			curl -fsSL https://raw.githubusercontent.com/keyaedisa/valen_repo/trunk/README.md | sed -n '19,20p' >> $profile/pacman.conf
		fi
		pmanConf=$(cat $profile/pacman.conf)
		if [[ "$pmanConf" =~ "valen_repo" ]]; then
			echo "Repo found in $profile/pacman.conf"
		else
			echo "Repo not found in $profile/pacman.conf! Will now add!"
			curl -fsSL https://raw.githubusercontent.com/keyaedisa/valen_repo/trunk/README.md | sed -n '19,20p' >> $profile/pacman.conf
		fi
		echo
		printf "A brief FYI! Once you install your ISO I highly recommend removing Valen Repo from your new /etc/pacman.conf and going to the Valen Repo to re-add Valen Repo using the provided script which will allow you to securely connect to the repo! This way you can sleep easy at night knowing that the packages you download from Valen Repo are not infected between when they leave the server and make it to your system!\n"
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf "."
		sleep 1.2
		printf ".\n"
		sleep 1.2
		echo "All done! Lets continue."
		fin='1'
		;;
	n | N | no | No )
		echo "No worries! If you change your mind later you can always add it using the script provided on my repo Valen Repo!"
		echo "Security is also not compromised thanks to fancy scripting allowing you a secure connection to Valen Repo!"
		sleep 3
		fin='1'
		;;
	* )
		echo "abs does not understand! Try again. (${fgGreen}y${txReset}/${fgRed}n${txReset})"
		;;
 esac
 done
}

mkarchisoVerboseCheck() {
 done="0"
while [ $done != 1 ]; do 
echo "Note: Turning off verbosity for mkarchiso does not stop the terminal from being filled as it builds your ISO."
read -p "Do you want to enable verbose out for mkarchiso? Is great for scanning for weird errors. (${fgGreen}y${txReset}/${fgRed}n${txReset}) " YN
case $YN in
	y | Y | yes | Yes | YES )
		echo "Oki. Building ISO ${fgCyan}with${txReset} verbose output!"
		sudo mkarchiso -v -w $buildDir -o $outDir $profile
		sudo chown -R $user $buildDir
		sudo chown -R $user $outDir
		cp $buildDir/iso/arch/pkglist.x86_64.txt  $outDir/xerolinux-$(date +%Y.%m.%d)-pkglist.txt
		done="1"
		;;
	n | N | no | No | NO )
		echo "Oki. Building ISO ${fgCyan}without${txReset} verbose output!"
		sudo mkarchiso -w $buildDir -o $outDir $profile
		sudo chown -R $user $buildDir
		sudo chown -R $user $outDir
		cp $buildDir/iso/$profile/pkglist.x86_64.txt  $outDir/xerolinux-$(date +%Y.%m.%d)-pkglist.txt
		done="1"
		;;
	* )
		echo "${fgRed}Invalid${txReset} response. ${txUnderline}Try again${txReset}. Either ${fgGreen}Yes${txReset} or ${fgRed}No${txReset}."
		;;
esac
done

}
