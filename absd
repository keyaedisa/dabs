#!/bin/bash

export BT="absd"

source /etc/$BT/misc/.bashFormatting
source /etc/$BT/misc/.functions
source /etc/$BT/.options

${BT}C() {
	echo "Oki, let's get ready to build a custom iso using a user provided profile."
#	read -p "What is the name of the archiso profile ${BT} will be building your iso with? : " archisoProfile
#	echo
#	echo "Scanning for provided archiso profile."
#	if [[ ! -d $archisoProfile ]]; then
#		echo "Couldn't find the archiso profile you provided in the current directory."
#		echo "Please change to the proper directory and call ${BT} once more."
#	else
#		echo "${BT} found your archiso profile. ${BT} will now begin your iso's build process."
	custom
#	fi
}

${BT}X() {
	echo "Oki, let's get ready to build a Xero iso from the provided xero profile."
	echo
	echo "Scanning for Xero profile."
	if [[ ! -d Xero ]]; then
		echo "Couldn't find the xero profile in the current directory."
		cloneGit xero
		echo "Changing directory to just cloned repo and beginning build process." && sleep 1.7
		cd ~/xero_iso
		xero
	else
		echo "${BT} found the xerolinux profile. ${BT} will now begin the xero build process." && sleep 1.7
		xero
	fi
}

${BT}Xg() {
	echo "Oki, let's get ready to build a XeroG iso from the provided XeroG profile."
	echo
	echo "Scanning for XeroG profile."
	if [[ ! -d XeroG ]]; then
		echo "Couldn't find the XeroG profile in the current directory."
		cloneGit xerog
		echo "Changing directory to just cloned repo and beginning build process." && sleep 1.7
		cd ~/xero_g_iso
		xerog
	else
		echo "${BT} found the xerolinux profile. ${BT} will now begin the xero build process." && sleep 1.7
		xerog
	fi
}

if [[ $1 == "-c" || $1 == "custom" ]]; then
	custom
elif [[ $1 == "-h" || $1 == "--help" ]]; then
	helpOpt $1
elif [[ $1 == "-L" ]]; then
	listOpt
elif [[ $1 == "-x" || $1 == "xero" ]]; then
	xero
elif  [[ $1 == "-xg" || $1 == "xerog" ]]; then
	xerog
elif [[ -n $1 ]]; then # If stdin is a not empty string not matching any  of the previous conditions then:
	echo "Sorry, ${BT} does not recognize this option. Run ${fgCyan}${BT} -h${txReset} or ${fgCyan}${BT} --help (for more detailed version)${txReset} to display help message."
else
	listOpt
	read -p "What option would you like to select? " answer
	finished='0'
	while [ finished != 1 ]; do
	case $answer in
		-c | custom )
			finished='1'
			custom
			;;
		-h | --help )
			helpOpt $answer
			;;
		-L )
			listOpt
			;;
		-x | xero )
			finished='1'
			xero
			;;
		-xg | xerog )
			finished='1'
			xerog
			;;
		* )
			echo "Not a valid ${BT} option. Enter ${fgCyan}${txUnderline}custom${txReset} or ${fgCyan}${txUnderline}xero${txReset}"
			echo "Additionally you can run ${fgCyan}${BT} help${txReset} for ${BT} options and descriptions."
			read -p "Are you looking to build a ${fgCyan}${txUnderline}custom${txReset} iso or a ${fgCyan}${txUnderline}xero${txReset} iso? " answer
			;;
	esac
	done
fi

# Functionality for the future potentially
# Error catching
#	echo "${txBold}last-error${txReset}"
#	echo "Adding this option to ${BT} will print last exit/err code ${BT} set when last ran."
#	echo $fgMagenta&&xUnicode 2730 49&&echo $txReset
